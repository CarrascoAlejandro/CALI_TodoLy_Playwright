{
	"info": {
		"_postman_id": "59b4847d-e05c-497c-b38e-d0f2dc2616e3",
		"name": "PostmanTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29459627"
	},
	"item": [
		{
			"name": "Crear Usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Guardar el email en la variable de entorno \"Email\"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"Email\", jsonData.Email);\r",
							"\r",
							"// Guardar el password en la variable de entorno \"Password\"\r",
							"var requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
							"if (requestBody.Password) {\r",
							"    pm.environment.set(\"Password\", requestBody.Password);\r",
							"}\r",
							"\r",
							"// Guardar el id en la variable de entorno \"Id\"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"Id\", jsonData.Id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// let today = new Date().getTime() \r",
							"// pm.collectionVariables.set(\"emailGenerated\", `${today}@email.com`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"FullName\": \"{{$randomFullName}}\",\r\n  \"Password\": \"{{$randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}user.json"
			},
			"response": []
		},
		{
			"name": "Create Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Guardar el item padre en la variable de entorno \"Item\"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"Item\", jsonData.Id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\": \"New Item 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}items.json"
			},
			"response": []
		},
		{
			"name": "Create Item Child",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Guardar el item hijo en la variable de entorno \"Item_child\"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"Item_child\", jsonData.Id);\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(\"Valor de Item child:\",jsonData.Id);\r",
							"\r",
							"pm.test(\"Imprimir valor de la variable Item\", function() {\r",
							"    console.log(\"Valor de Item:\", pm.environment.get(\"Item\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\": \"New Item child\",\r\n    \"ParentId\": {{Item}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}items.json"
			},
			"response": []
		},
		{
			"name": "Get Root Item By Child Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que el código de estado de la respuesta sea 200, indicando éxito.\r",
							"pm.test(\"El código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que el tiempo de respuesta sea menor de 2 segundos para asegurar rendimiento.\r",
							"pm.test(\"El tiempo de respuesta es menor de 2 segundos\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Verifica que el encabezado 'Content-Type' esté presente en la respuesta.\r",
							"pm.test(\"El encabezado 'Content-Type' está presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Verifica que el encabezado 'Content-Type' sea correcto para respuestas JSON.\r",
							"pm.test(\"El encabezado 'Content-Type' es correcto para JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Verifica que el 'OwnerId' en la respuesta coincida con el 'Id' de las variables de entorno.\r",
							"pm.test(\"El 'OwnerId' coincide con el 'Id' de las variables de entorno\", function () {\r",
							"    var responseData = pm.response.json(); // Obtiene la respuesta en formato JSON\r",
							"    var ownerId = responseData.OwnerId; // Accede al OwnerId en la respuesta\r",
							"    var expectedId = pm.environment.get(\"Id\"); // Obtiene el Id almacenado en las variables de entorno\r",
							"\r",
							"    // Compara ambos Ids para asegurarse de que son iguales\r",
							"    pm.expect(ownerId.toString()).to.equal(expectedId.toString(), \"El OwnerId no coincide con el Id esperado de las variables de entorno\");\r",
							"});\r",
							"\r",
							"// Verifica que la estructura de la respuesta sea la esperada y que todos los campos estén presentes.\r",
							"pm.test(\"La estructura de respuesta es correcta\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    // Verificar propiedades del ítem raíz\r",
							"    pm.expect(responseData).to.have.property('Id');\r",
							"    pm.expect(responseData).to.have.property('Content');\r",
							"    pm.expect(responseData).to.have.property('ItemType');\r",
							"    pm.expect(responseData).to.have.property('Checked');\r",
							"    pm.expect(responseData).to.have.property('ProjectId');\r",
							"    pm.expect(responseData).to.have.property('ParentId');\r",
							"    pm.expect(responseData).to.have.property('Path');\r",
							"    pm.expect(responseData).to.have.property('Collapsed');\r",
							"    pm.expect(responseData).to.have.property('DateString');\r",
							"    pm.expect(responseData).to.have.property('DateStringPriority');\r",
							"    pm.expect(responseData).to.have.property('DueDate');\r",
							"    pm.expect(responseData).to.have.property('Recurrence');\r",
							"    pm.expect(responseData).to.have.property('ItemOrder');\r",
							"    pm.expect(responseData).to.have.property('Priority');\r",
							"    pm.expect(responseData).to.have.property('LastSyncedDateTime');\r",
							"    pm.expect(responseData).to.have.property('DueDateTime');\r",
							"    pm.expect(responseData).to.have.property('CreatedDate');\r",
							"    pm.expect(responseData).to.have.property('LastCheckedDate');\r",
							"    pm.expect(responseData).to.have.property('LastUpdatedDate');\r",
							"    pm.expect(responseData).to.have.property('Deleted');\r",
							"    pm.expect(responseData).to.have.property('Notes');\r",
							"    pm.expect(responseData).to.have.property('InHistory');\r",
							"    pm.expect(responseData).to.have.property('SyncClientCreationId');\r",
							"    pm.expect(responseData).to.have.property('DueTimeSpecified');\r",
							"    pm.expect(responseData).to.have.property('OwnerId');\r",
							"\r",
							"    pm.expect(responseData).to.have.property('Children').to.be.an('array');\r",
							"\r",
							"    // Opcionalmente, verifica algunas propiedades del primer hijo si Children no está vacío\r",
							"    if (responseData.Children.length > 0) {\r",
							"        pm.expect(responseData.Children[0]).to.have.property('Id');\r",
							"        pm.expect(responseData.Children[0]).to.have.property('Content');\r",
							"        pm.expect(responseData.Children[0]).to.have.property('ItemType');\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{url}}Items/{{Item}}/RootItem.json"
			},
			"response": []
		},
		{
			"name": "Update Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Checked\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}items/{{Item}}.json"
			},
			"response": []
		},
		{
			"name": "Get Done Root Item By Child Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que el código de estado de la respuesta sea 200, indicando éxito.\r",
							"pm.test(\"El código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que el tiempo de respuesta sea menor de 2 segundos para asegurar rendimiento.\r",
							"pm.test(\"El tiempo de respuesta es menor de 2 segundos\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Verifica que el encabezado 'Content-Type' esté presente en la respuesta.\r",
							"pm.test(\"El encabezado 'Content-Type' está presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Verifica que el encabezado 'Content-Type' sea correcto para respuestas JSON.\r",
							"pm.test(\"El encabezado 'Content-Type' es correcto para JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Verifica que el 'OwnerId' en la respuesta coincida con el 'Id' de las variables de entorno, tanto para el elemento raíz como para los hijos.\r",
							"pm.test(\"El 'OwnerId' del elemento raíz y de los hijos coincide con el 'Id' de las variables de entorno\", function () {\r",
							"    var responseData = pm.response.json(); // Obtiene la respuesta en formato JSON\r",
							"    var ownerId = responseData.OwnerId; // Accede al OwnerId en la respuesta del elemento raíz\r",
							"    var expectedId = pm.environment.get(\"Id\"); // Obtiene el Id almacenado en las variables de entorno\r",
							"\r",
							"    // Compara el OwnerId del elemento raíz\r",
							"    pm.expect(ownerId.toString()).to.equal(expectedId.toString(), \"El OwnerId del elemento raíz no coincide con el Id esperado de las variables de entorno\");\r",
							"\r",
							"    // Compara el OwnerId de los hijos, si están presentes\r",
							"    if (responseData.Children && responseData.Children.length > 0) {\r",
							"        responseData.Children.forEach(child => {\r",
							"            pm.expect(child.OwnerId.toString()).to.equal(expectedId.toString(), \"El OwnerId de un hijo no coincide con el Id esperado de las variables de entorno\");\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"// Verifica que la estructura de respuesta sea la esperada y que todos los campos estén presentes.\r",
							"pm.test(\"La estructura de respuesta es correcta\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    // Verifica las propiedades del ítem raíz\r",
							"    pm.expect(responseData).to.have.property('Id');\r",
							"    pm.expect(responseData).to.have.property('Content');\r",
							"    pm.expect(responseData).to.have.property('ItemType');\r",
							"    pm.expect(responseData).to.have.property('Checked');\r",
							"    pm.expect(responseData).to.have.property('Priority');\r",
							"    pm.expect(responseData).to.have.property('LastSyncedDateTime');\r",
							"    pm.expect(responseData).to.have.property('CreatedDate');\r",
							"    pm.expect(responseData).to.have.property('LastCheckedDate');\r",
							"    pm.expect(responseData).to.have.property('LastUpdatedDate');\r",
							"    pm.expect(responseData).to.have.property('Deleted');\r",
							"    pm.expect(responseData).to.have.property('Notes');\r",
							"    pm.expect(responseData).to.have.property('InHistory');\r",
							"    pm.expect(responseData).to.have.property('SyncClientCreationId');\r",
							"    pm.expect(responseData).to.have.property('DueTimeSpecified');\r",
							"    pm.expect(responseData).to.have.property('OwnerId');\r",
							"    pm.expect(responseData).to.have.property('Children').that.is.an('array');\r",
							"\r",
							"    // Verifica la estructura de los hijos si están presentes\r",
							"    if (responseData.Children.length > 0) {\r",
							"                const child = responseData.Children[0];\r",
							"        pm.expect(child).to.have.property('Id');\r",
							"        pm.expect(child).to.have.property('Content');\r",
							"        pm.expect(child).to.have.property('ItemType');\r",
							"        pm.expect(child).to.have.property('Checked');\r",
							"        pm.expect(child).to.have.property('ProjectId');\r",
							"        pm.expect(child).to.have.property('ParentId');\r",
							"        pm.expect(child).to.have.property('Path');\r",
							"        pm.expect(child).to.have.property('Collapsed');\r",
							"        pm.expect(child).to.have.property('DateString');\r",
							"        pm.expect(child).to.have.property('DateStringPriority');\r",
							"        pm.expect(child).to.have.property('DueDate');\r",
							"        pm.expect(child).to.have.property('Recurrence');\r",
							"        pm.expect(child).to.have.property('ItemOrder');\r",
							"        pm.expect(child).to.have.property('Priority');\r",
							"        pm.expect(child).to.have.property('LastSyncedDateTime');\r",
							"        pm.expect(child).to.have.property('Children');\r",
							"        pm.expect(child).to.have.property('DueDateTime');\r",
							"        pm.expect(child).to.have.property('CreatedDate');\r",
							"        pm.expect(child).to.have.property('LastCheckedDate');\r",
							"        pm.expect(child).to.have.property('LastUpdatedDate');\r",
							"        pm.expect(child).to.have.property('Deleted');\r",
							"        pm.expect(child).to.have.property('Notes');\r",
							"        pm.expect(child).to.have.property('InHistory');\r",
							"        pm.expect(child).to.have.property('SyncClientCreationId');\r",
							"        pm.expect(child).to.have.property('DueTimeSpecified');\r",
							"        pm.expect(child).to.have.property('OwnerId');\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{url}}Items/{{Item_child}}/DoneRootItem.json"
			},
			"response": []
		},
		{
			"name": "Get Icons By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que el código de estado de la respuesta sea 200, indicando éxito.\r",
							"pm.test(\"El código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que el tiempo de respuesta sea adecuado.\r",
							"pm.test(\"El tiempo de respuesta es razonable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Verifica que el encabezado 'Content-Type' esté presente y sea correcto para XML.\r",
							"pm.test(\"El encabezado 'Content-Type' es correcto para XML\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
							"});\r",
							"\r",
							"// Verifica la estructura y contenido del XML respondido.\r",
							"pm.test(\"La estructura y contenido de la respuesta XML son correctos\", function () {\r",
							"    var responseXml = xml2Json(pm.response.text()); // Convierte la respuesta XML a JSON para facilitar la manipulación.\r",
							"    \r",
							"    // Verifica que el objeto 'IconObject' tenga las propiedades 'Id' y 'URL'.\r",
							"    pm.expect(responseXml.IconObject).to.have.property('Id', pm.environment.get(\"Id_icon\"));\r",
							"    pm.expect(responseXml.IconObject).to.have.property('URL');\r",
							"    \r",
							"    // Opcional: Verificar el contenido específico de la URL, si es conocido.\r",
							"    pm.expect(responseXml.IconObject.URL).to.include(\"todo.ly/Images/icons/\");\r",
							"});\r",
							"\r",
							"// Verifica que la URL de la respuesta coincida con la esperada basándose en la variable de entorno.\r",
							"pm.test(\"La URL del ícono en la respuesta coincide con la esperada\", function () {\r",
							"    var responseXml = xml2Json(pm.response.text()); // Convierte la respuesta XML a JSON para facilitar la manipulación.\r",
							"    var URL = responseXml.IconObject.URL; // Accede a la URL en la respuesta del ícono\r",
							"    var expectedUrl = \"http://todo.ly/Images/icons/Home.png\"; // URL esperada\r",
							"\r",
							"    // Compara la URL de la respuesta con la esperada\r",
							"    pm.expect(URL).to.equal(expectedUrl, \"La URL del ícono no coincide con la URL esperada\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{url}}icons/{{Id_icon}}.xml"
			},
			"response": []
		},
		{
			"name": "Get IsAuthenticated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que el código de estado de la respuesta sea 200, indicando éxito.\r",
							"pm.test(\"El código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verifica que el tiempo de respuesta sea adecuado.\r",
							"pm.test(\"El tiempo de respuesta es razonable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Verifica que el encabezado 'Content-Type' esté presente y sea correcto para XML.\r",
							"pm.test(\"El encabezado 'Content-Type' es correcto para XML\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");\r",
							"});\r",
							"\r",
							"// Verifica la estructura y contenido de la respuesta XML.\r",
							"pm.test(\"La estructura y contenido de la respuesta XML son correctos\", function () {\r",
							"    var responseXml = xml2Json(pm.response.text()); // Convierte la respuesta XML a JSON para facilitar la manipulación.\r",
							"    \r",
							"    // Verifica que la respuesta contenga un valor booleano esperado.\r",
							"    pm.expect(responseXml.boolean).to.be.oneOf([\"true\", \"false\"]);\r",
							"});\r",
							"\r",
							"// Verifica que el valor booleano de la respuesta sea 'true', indicando autenticación exitosa.\r",
							"pm.test(\"La autenticación es exitosa\", function () {\r",
							"    var responseXml = xml2Json(pm.response.text()); // Convierte la respuesta XML a JSON para facilitar la manipulación.\r",
							"    \r",
							"    // Asegúrate de que el valor booleano es 'true'.\r",
							"    pm.expect(responseXml.boolean).to.equal(\"true\", \"La respuesta indica que la autenticación no es exitosa\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{Password}}",
						"username": "{{Email}}"
					}
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"url": "{{url}}authentication/isauthenticated.xml"
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": {
			"password": "{{Password}}",
			"username": "{{Email}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}